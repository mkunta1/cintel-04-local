[{"name": "app.py", "content": "\n\nfrom shiny import App, Inputs, Outputs, Session, ui, render, reactive\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport pandas as pd  # Import pandas here\nfrom shinywidgets import output_widget, render_widget\nimport shinyswatch\nfrom palmerpenguins import load_penguins \nimport seaborn as sns\nimport ipyleaflet as ipyl\nfrom shinywidgets import render_plotly\n\n# Load the Palmer Penguins dataset\npenguins_df = load_penguins()\npenguins_df.head()\n\n\n# Define UI\n\n# Define UI\napp_ui = ui.page_fluid(\n    ui.h2(\"Penguin Dashboard\", style=\"background-color:orange; color:Blue; text-align: center;\"),\n    ui.row(\n        ui.column(4, \n            ui.div(\n                ui.output_plot(\"bar_chart\", height=\"350px\"),  # histogram output\n                style=\"border: 1px solid #ccc; padding: 10px; margin: 10px; border-radius: 5px;\"\n            )\n        ),\n        ui.column(4, \n            ui.div(\n                output_widget(\"plot1\", height=\"350px\"),  # Set height for plot1\n                style=\"border: 1px solid #ccc; padding: 10px; margin: 10px; border-radius: 5px;\"\n            )\n        ),\n        ui.column(4, \n            ui.div(\n                output_widget(\"density_plot\", height=\"350px\"),  # Set height for density plot\n                style=\"border: 1px solid #ccc; padding: 10px; margin: 10px; border-radius: 5px;\"\n            )\n        )\n    ),\n    ui.row(\n        ui.column(4, \n            ui.div(\n                output_widget(\"scatter_plot\", height=\"500px\"),  # Set height for scatter plot\n                style=\"border: 1px solid #ccc; padding: 10px; margin: 10px; border-radius: 5px;\"\n            )\n        ),\n      ui.column(8,  # Wider column for the inputs\n            ui.div(\n                  ui.row(\n                    ui.column(3, \n                        ui.input_checkbox_group(\n                            \"selected_species_list\", \n                            \"Choose Species\", \n                            [\"Adelie\", \"Gentoo\", \"Chinstrap\"], \n                            selected=[\"Adelie\"], \n                            inline=True  # Display inline\n                        )\n                    ),\n                    ui.column(3, \n                        ui.input_checkbox_group(\n                            \"selected_island_list\", \n                            \"Choose Island\", \n                            [\"Biscoe\", \"Dream\", \"Torgersen\"], \n                            selected=[\"Biscoe\"], \n                            inline=True  # Display inline\n                        )\n                    ),\n                    ui.column(3, \n                        ui.input_selectize(\n                            \"sex\", \n                            \"Select Sex:\", \n                            {\"male\": \"male\", \"female\": \"female\"}, \n                            multiple=True, \n                            selected=['female']\n                        )\n                    ),\n                    ui.column(3, \n                        ui.input_selectize(\n                            \"selected_attribute\", \n                            \"Penguin Metric\",  \n                            [\"bill_length_mm\", \"bill_depth_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"]\n                        )\n                    ),\n                    ui.column(2, \n                        ui.input_numeric(\n                            \"n\", \n                            \"Number of Bins\", \n                            value=10, \n                            min=1, \n                            max=20\n                        )\n                    )\n                )\n            )\n        )\n    ),\n    ui.row(\n        ui.column(12, \n            ui.div(\n                ui.output_table(\"data_table\", style=\"overflow: auto; height: 350px;\"),  # Set height for data table\n                style=\"border: 1px solid #ccc; padding: 10px; margin: 10px; border-radius: 5px;\"\n            )\n        )\n    )\n)\n \n \n  \n \n\ndef server(input, output, session):   \n    @reactive.calc\n    def filtered_df():          \n        selected_species = input.selected_species_list()\n        selected_island = input.selected_island_list()\n        selected_sex = input.sex()\n        filtered = penguins_df[penguins_df[\"species\"].isin(selected_species) & penguins_df[\"island\"].isin(selected_island)\n                               & penguins_df[\"sex\"].isin(selected_sex)]\n        return filtered\n        \n    @output\n    @render.table\n    def data_table():\n          #return render.DataTable(filtered_df(), selection_mode=\"row\")\n          return filtered_df()\n\n  \n    @output\n    @render.table\n    def filtered_table():\n          return filtered_df()\n        \n    @output\n    @render.plot\n    def bar_chart():\n            df = filtered_df() \n            plt.figure(figsize=(6,4))  # Set the figure size\n            sns.histplot(data=df, x=\"species\",  hue=\"species\", multiple=\"stack\", kde=False, palette=\"Set2\", discrete=True)\n            plt.title(\"Unique Penguin Species Count by Island and Gender\")\n            plt.xlabel(\"Species\")\n            plt.ylabel(\"Count\")\n            return plt.gcf()  # Return the current figure\n    \n   \n    @output\n    @render_widget\n    def plot1(): \n        df = filtered_df()\n        n_bins = input.n()  \n        fig = px.histogram(df, x=input.selected_attribute(), color=\"species\", \n                           title=\"Distribution of Species by attribute\", \n                           barmode='group', \n                           color_discrete_sequence=px.colors.qualitative.Set2,  nbins=n_bins)\n        fig.update_layout(bargap=0.2)  # Set bar gap\n        return fig\n\n\n    @output\n    @render_widget\n    def density_plot(): \n        df = filtered_df()\n         # Calculate the number of unique species for selected islands\n        selected_attribute = input.selected_attribute()\n        fig = px.density_contour(df, x=selected_attribute, \n            color=\"species\",\n            histnorm='density',  # Normalize the histogram for density\n            title=f\"Density Histogram of {selected_attribute.replace('_', ' ').title()} by Species\",\n            color_discrete_sequence=px.colors.qualitative.Set2 )\n        fig.update_traces(\n        line=dict(width=2)  # Set the width of the contour lines\n    )\n        \n         # Update the traces to fill contours and set transparency\n        fig.update_layout( \n            title_font=dict(size=18),  # Increase title font size\n            xaxis_title=dict(font=dict(size=14)),  # X-axis title font size\n            yaxis_title=dict(font=dict(size=14)),  # Y-axis title font size\n            legend_title=dict(font=dict(size=14)),  # Legend title font size\n            legend=dict(font=dict(size=12)),  # Legend font size\n            xaxis=dict(showgrid=True, gridcolor='LightGray'),  # Show grid on x-axis\n            yaxis=dict(showgrid=True, gridcolor='LightGray'),  # Show grid on y-axis\n            plot_bgcolor='rgba(255, 255, 255, 0.5)',  # Set plot background color\n            paper_bgcolor='rgba(255, 255, 255, 1)',)  # Set paper background color)  # Set bar gap\n        return fig\n\n    @output\n    @render_widget\n    def scatter_plot():\n            df = filtered_df() \n            fig = px.scatter(df,\n            x=\"body_mass_g\",\n            y=\"flipper_length_mm\",\n            color=\"species\", \n            title=\"Scatter Plot of Body mass vs. Flipper Length\",\n            labels={\"body_mass_g\": \"Body Mass\",\n                \"flipper_length_mm\": \"Flipper Length\"}\n                            )\n\n            \n            return fig      \n            \n   \n      \napp = App(app_ui, server)\n\n\nif __name__ == \"__main__\":\n    app.run()\n", "type": "text"}]